{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar DEFAULT_API_VERSION = '2020-04';\nvar DEFAULT_ACCESSTOKEN = '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';\nvar DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'; //Sends the POST to the graphQL\n\nexport function graphqlRequest(_x) {\n  return _graphqlRequest.apply(this, arguments);\n} //Gets the tags and id of the customer of the given order\n\nfunction _graphqlRequest() {\n  _graphqlRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gql) {\n    var shop,\n        accessToken,\n        apiVersion,\n        url,\n        response,\n        _yield$response$json,\n        data,\n        errors,\n        userErrors,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shop = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_STORENAME;\n            accessToken = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ACCESSTOKEN;\n            apiVersion = _args.length > 3 && _args[3] !== undefined ? _args[3] : DEFAULT_API_VERSION;\n            url = \"https://\".concat(shop, \"/admin/api/\").concat(apiVersion, \"/graphql.json\");\n            _context.next = 6;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                \"Content-Type\": \"application/graphql\",\n                \"X-Shopify-Access-Token\": accessToken\n              },\n              body: gql\n            });\n\n          case 6:\n            response = _context.sent;\n            _context.next = 9;\n            return response.json();\n\n          case 9:\n            _yield$response$json = _context.sent;\n            data = _yield$response$json.data;\n            errors = _yield$response$json.errors;\n\n            if (!errors) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new Error(JSON.stringify(errors));\n\n          case 14:\n            userErrors = Object.values(data).find(function (v) {\n              return v && v.userErrors;\n            });\n\n            if (!(userErrors && userErrors.length > 0)) {\n              _context.next = 17;\n              break;\n            }\n\n            throw new Error(JSON.stringify(userErrors));\n\n          case 17:\n            return _context.abrupt(\"return\", data);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _graphqlRequest.apply(this, arguments);\n}\n\nexport function coolersFromOrder(orderId) {\n  return;\n  \"query {\\n    order(id: gid://shopify/Order/\".concat(orderId, \") {\\n      customer {\\n        id\\n      }\\n    }\\n  }\");\n} //Makes the gql string that reduces the number of coolers for the\n//customer of the given order\n\nexport function reduceCoolerCount(order) {} //Makes the gql string that increases the number of coolers for the\n//customer of the given order\n\nexport function increaseCoolerCount(order) {} //Makes the gql string that adds the cooler to the order's custom attribute\n\nexport function addToOrder(order, cooler) {}\nexport default graphqlRequest;","map":{"version":3,"sources":["C:/Users/abouh/OneDrive/Desktop/sampleApp/pages/store.js"],"names":["DEFAULT_API_VERSION","DEFAULT_ACCESSTOKEN","DEFAULT_STORENAME","graphqlRequest","gql","shop","accessToken","apiVersion","url","fetch","method","headers","body","response","json","data","errors","Error","JSON","stringify","userErrors","Object","values","find","v","length","coolersFromOrder","orderId","reduceCoolerCount","order","increaseCoolerCount","addToOrder","cooler"],"mappings":";;AAEA,IAAMA,mBAAmB,GAAG,SAA5B;AACA,IAAMC,mBAAmB,GAAG,wCAA5B;AACA,IAAMC,iBAAiB,GAAG,mCAA1B,C,CAEA;;AAEA,gBAAsBC,cAAtB;AAAA;AAAA,C,CAmBA;;;6EAnBO,iBAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoCC,YAAAA,IAApC,2DAA2CH,iBAA3C;AACLI,YAAAA,WADK,2DACSL,mBADT;AAC8BM,YAAAA,UAD9B,2DACyCP,mBADzC;AAGCQ,YAAAA,GAHD,qBAGkBH,IAHlB,wBAGoCE,UAHpC;AAAA;AAAA,mBAIkBE,KAAK,CAACD,GAAD,EAAM;AAChCE,cAAAA,MAAM,EAAE,MADwB;AAEhCC,cAAAA,OAAO,EAAE;AACP,gCAAgB,qBADT;AAEP,0CAA0BL;AAFnB,eAFuB;AAMhCM,cAAAA,IAAI,EAAER;AAN0B,aAAN,CAJvB;;AAAA;AAICS,YAAAA,QAJD;AAAA;AAAA,mBAY0BA,QAAQ,CAACC,IAAT,EAZ1B;;AAAA;AAAA;AAYGC,YAAAA,IAZH,wBAYGA,IAZH;AAYSC,YAAAA,MAZT,wBAYSA,MAZT;;AAAA,iBAaDA,MAbC;AAAA;AAAA;AAAA;;AAAA,kBAaa,IAAIC,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAV,CAbb;;AAAA;AAcCI,YAAAA,UAdD,GAccC,MAAM,CAACC,MAAP,CAAcP,IAAd,EAAoBQ,IAApB,CAAyB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,IAAIA,CAAC,CAACJ,UAAX;AAAA,aAA1B,CAdd;;AAAA,kBAeDA,UAAU,IAAIA,UAAU,CAACK,MAAX,GAAoB,CAfjC;AAAA;AAAA;AAAA;;AAAA,kBAe0C,IAAIR,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeC,UAAf,CAAV,CAf1C;;AAAA;AAAA,6CAgBEL,IAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBP,OAAO,SAASW,gBAAT,CAA0BC,OAA1B,EAAmC;AACxC;AACA,uDACkCA,OADlC;AAOD,C,CAED;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC,CAExC,C,CAED;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BD,KAA7B,EAAoC,CAE1C,C,CAED;;AACA,OAAO,SAASE,UAAT,CAAoBF,KAApB,EAA2BG,MAA3B,EAAmC,CAEzC;AAED,eAAe7B,cAAf","sourcesContent":["\r\n\r\nconst DEFAULT_API_VERSION = '2020-04';\r\nconst DEFAULT_ACCESSTOKEN = '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'\r\nconst DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'\r\n\r\n//Sends the POST to the graphQL\r\n\r\nexport async function graphqlRequest(gql,  shop = DEFAULT_STORENAME,\r\n  accessToken = DEFAULT_ACCESSTOKEN, apiVersion=DEFAULT_API_VERSION) {\r\n\r\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      \"Content-Type\": \"application/graphql\",\r\n      \"X-Shopify-Access-Token\": accessToken\r\n    },\r\n    body: gql\r\n  });\r\n  const { data, errors } = await response.json();\r\n  if (errors) throw new Error(JSON.stringify(errors));\r\n  const userErrors = Object.values(data).find(v => v && v.userErrors);\r\n  if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\r\n  return data;\r\n}\r\n\r\n//Gets the tags and id of the customer of the given order\r\nexport function coolersFromOrder(orderId) {\r\n  return\r\n  `query {\r\n    order(id: gid://shopify/Order/${orderId}) {\r\n      customer {\r\n        id\r\n      }\r\n    }\r\n  }`\r\n}\r\n\r\n//Makes the gql string that reduces the number of coolers for the\r\n//customer of the given order\r\nexport function reduceCoolerCount(order) {\r\n\r\n}\r\n\r\n//Makes the gql string that increases the number of coolers for the\r\n//customer of the given order\r\nexport function increaseCoolerCount(order) {\r\n\r\n}\r\n\r\n//Makes the gql string that adds the cooler to the order's custom attribute\r\nexport function addToOrder(order, cooler) {\r\n\r\n}\r\n\r\nexport default graphqlRequest\r\n"]},"metadata":{},"sourceType":"module"}