{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from \"node-fetch\"; //import hostURL from './../server.js'\n\nvar DEFAULT_API_VERSION = '2020-04';\nvar DEFAULT_ACCESSTOKEN = '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';\nvar DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'; //Sends the POST to the graphQL\n\nfunction graphqlRequest(_x) {\n  return _graphqlRequest.apply(this, arguments);\n} //Gets the tags and id of the customer of the given order\n\n\nfunction _graphqlRequest() {\n  _graphqlRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(gql) {\n    var shop,\n        accessToken,\n        apiVersion,\n        url,\n        response,\n        _yield$response$json,\n        data,\n        errors,\n        userErrors,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shop = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_STORENAME;\n            accessToken = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ACCESSTOKEN;\n            apiVersion = _args.length > 3 && _args[3] !== undefined ? _args[3] : DEFAULT_API_VERSION;\n            url = \"https://\".concat(shop, \"/admin/api/\").concat(apiVersion, \"/graphql.json\");\n            _context.next = 6;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                \"Content-Type\": \"application/graphql\",\n                \"X-Shopify-Access-Token\": accessToken,\n                \"Access-Control-Allow-Origin\": \"*\"\n              },\n              body: gql\n            });\n\n          case 6:\n            response = _context.sent;\n            _context.next = 9;\n            return response.json();\n\n          case 9:\n            _yield$response$json = _context.sent;\n            data = _yield$response$json.data;\n            errors = _yield$response$json.errors;\n\n            if (!errors) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new Error(JSON.stringify(errors));\n\n          case 14:\n            userErrors = Object.values(data).find(function (v) {\n              return v && v.userErrors;\n            });\n\n            if (!(userErrors && userErrors.length > 0)) {\n              _context.next = 17;\n              break;\n            }\n\n            throw new Error(JSON.stringify(userErrors));\n\n          case 17:\n            return _context.abrupt(\"return\", data);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _graphqlRequest.apply(this, arguments);\n}\n\nexport function coolersFromOrder(_x2) {\n  return _coolersFromOrder.apply(this, arguments);\n} //Makes the gql string that reduces the number of coolers for the\n//customer of the given order\n\nfunction _coolersFromOrder() {\n  _coolersFromOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orderId) {\n    var data, id;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return graphqlRequest(\"query {\\n    order(id: gid://shopify/Order/\".concat(orderId, \") {\\n      customer {\\n        id\\n        tags\\n      }\\n    }\\n  }\"));\n\n          case 2:\n            data = _context2.sent;\n            id = data.order.customer.id;\n            alert(id);\n            return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, data.order), {}, {\n              id: data.order.customer.id,\n              tags: data.order.customer.tags\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _coolersFromOrder.apply(this, arguments);\n}\n\nexport function reduceCoolerCount(_x3) {\n  return _reduceCoolerCount.apply(this, arguments);\n} //Makes the gql string that increases the number of coolers for the\n//customer of the given order\n\nfunction _reduceCoolerCount() {\n  _reduceCoolerCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(customer) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", graphqlRequest());\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _reduceCoolerCount.apply(this, arguments);\n}\n\nexport function increaseCoolerCount(_x4) {\n  return _increaseCoolerCount.apply(this, arguments);\n} //Makes the gql string that adds the cooler to the order's custom attribute\n\nfunction _increaseCoolerCount() {\n  _increaseCoolerCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(customer) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", graphqlRequest());\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _increaseCoolerCount.apply(this, arguments);\n}\n\nexport function addToOrder(_x5, _x6) {\n  return _addToOrder.apply(this, arguments);\n}\n\nfunction _addToOrder() {\n  _addToOrder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(order, cooler) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", graphqlRequest());\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _addToOrder.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/abouh/OneDrive/Desktop/sampleApp/pages/store.js"],"names":["fetch","DEFAULT_API_VERSION","DEFAULT_ACCESSTOKEN","DEFAULT_STORENAME","graphqlRequest","gql","shop","accessToken","apiVersion","url","method","headers","body","response","json","data","errors","Error","JSON","stringify","userErrors","Object","values","find","v","length","coolersFromOrder","orderId","id","order","customer","alert","tags","reduceCoolerCount","increaseCoolerCount","addToOrder","cooler"],"mappings":"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","sourcesContent":["import fetch from \"node-fetch\";\r\n//import hostURL from './../server.js'\r\n\r\nconst DEFAULT_API_VERSION = '2020-04';\r\nconst DEFAULT_ACCESSTOKEN = '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'\r\nconst DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'\r\n\r\n//Sends the POST to the graphQL\r\n\r\nasync function graphqlRequest(gql,  shop = DEFAULT_STORENAME,\r\n  accessToken = DEFAULT_ACCESSTOKEN, apiVersion=DEFAULT_API_VERSION) {\r\n\r\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      \"Content-Type\": \"application/graphql\",\r\n      \"X-Shopify-Access-Token\": accessToken,\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    },\r\n    body: gql\r\n  });\r\n  const { data, errors } = await response.json();\r\n  if (errors) throw new Error(JSON.stringify(errors));\r\n  const userErrors = Object.values(data).find(v => v && v.userErrors);\r\n  if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\r\n  return data;\r\n}\r\n\r\n//Gets the tags and id of the customer of the given order\r\nexport async function coolersFromOrder(orderId) {\r\n  const data = await graphqlRequest(\r\n  `query {\r\n    order(id: gid://shopify/Order/${orderId}) {\r\n      customer {\r\n        id\r\n        tags\r\n      }\r\n    }\r\n  }`\r\n)\r\nconst id = data.order.customer.id;\r\nalert(id);\r\nreturn {...data.order, id: data.order.customer.id, tags: data.order.customer.tags}\r\n}\r\n\r\n//Makes the gql string that reduces the number of coolers for the\r\n//customer of the given order\r\nexport async function reduceCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that increases the number of coolers for the\r\n//customer of the given order\r\nexport async function increaseCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that adds the cooler to the order's custom attribute\r\nexport async function addToOrder(order, cooler) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}