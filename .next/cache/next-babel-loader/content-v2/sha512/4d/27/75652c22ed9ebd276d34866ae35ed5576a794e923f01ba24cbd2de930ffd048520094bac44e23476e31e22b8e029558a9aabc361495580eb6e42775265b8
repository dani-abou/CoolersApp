{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from \"node-fetch\";\nimport Cookies from 'js-cookie';\nconst DEFAULT_API_VERSION = '2020-04'; //Sends the POST to the graphQL\n\nasync function graphqlRequest(gql, shop = Cookies.get('shopOrigin'), accessToken = Cookies.get('accessToken'), apiVersion = DEFAULT_API_VERSION) {\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/graphql\",\n      \"X-Shopify-Access-Token\": accessToken,\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    body: gql\n  }); //\n  // const { data, errors } = await response.json();\n  // console.log(data);\n  // console.log(errors);\n  // if (errors) throw new Error(JSON.stringify(errors));\n  // const userErrors = Object.values(data).find(v => v && v.userErrors);\n  // if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\n  // return data;\n} //Gets the tags and id of the customer of the given order\n\n\nexport async function coolersFromOrder(orderId) {\n  const data = await graphqlRequest(`query {\n    order(id: gid://shopify/Order/${orderId}) {\n      customer {\n        id\n        tags\n      }\n    }\n  }`);\n  const id = data.order.customer.id;\n  alert(id);\n  return _objectSpread(_objectSpread({}, data.order), {}, {\n    id: data.order.customer.id,\n    tags: data.order.customer.tags\n  });\n} //Makes the gql string that reduces the number of coolers for the\n//customer of the given order\n\nexport async function reduceCoolerCount(customer) {\n  return graphqlRequest();\n} //Makes the gql string that increases the number of coolers for the\n//customer of the given order\n\nexport async function increaseCoolerCount(customer) {\n  return graphqlRequest();\n} //Makes the gql string that adds the cooler to the order's custom attribute\n\nexport async function addToOrder(order, cooler) {\n  return graphqlRequest();\n}","map":{"version":3,"sources":["C:/Users/abouh/OneDrive/Desktop/CoolersApp/pages/store.js"],"names":["fetch","Cookies","DEFAULT_API_VERSION","graphqlRequest","gql","shop","get","accessToken","apiVersion","url","response","method","headers","body","coolersFromOrder","orderId","data","id","order","customer","alert","tags","reduceCoolerCount","increaseCoolerCount","addToOrder","cooler"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,MAAMC,mBAAmB,GAAG,SAA5B,C,CAGA;;AAEA,eAAeC,cAAf,CAA8BC,GAA9B,EAAoCC,IAAI,GAAGJ,OAAO,CAACK,GAAR,CAAY,YAAZ,CAA3C,EACEC,WAAW,GAAGN,OAAO,CAACK,GAAR,CAAY,aAAZ,CADhB,EAC4CE,UAAU,GAACN,mBADvD,EAC4E;AAE1E,QAAMO,GAAG,GAAI,WAAUJ,IAAK,cAAaG,UAAW,eAApD;AAGA,QAAME,QAAQ,GAAG,MAAMV,KAAK,CAACS,GAAD,EAAM;AAChCE,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,qBADT;AAEP,gCAA0BL,WAFnB;AAGP,qCAA+B;AAHxB,KAFuB;AAOhCM,IAAAA,IAAI,EAAET;AAP0B,GAAN,CAA5B,CAL0E,CAe1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,C,CAED;;;AACA,OAAO,eAAeU,gBAAf,CAAgCC,OAAhC,EAAyC;AAC9C,QAAMC,IAAI,GAAG,MAAMb,cAAc,CAChC;AACH,oCAAoCY,OAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA,IARmC,CAAjC;AAUF,QAAME,EAAE,GAAGD,IAAI,CAACE,KAAL,CAAWC,QAAX,CAAoBF,EAA/B;AACAG,EAAAA,KAAK,CAACH,EAAD,CAAL;AACA,yCAAWD,IAAI,CAACE,KAAhB;AAAuBD,IAAAA,EAAE,EAAED,IAAI,CAACE,KAAL,CAAWC,QAAX,CAAoBF,EAA/C;AAAmDI,IAAAA,IAAI,EAAEL,IAAI,CAACE,KAAL,CAAWC,QAAX,CAAoBE;AAA7E;AACC,C,CAED;AACA;;AACA,OAAO,eAAeC,iBAAf,CAAiCH,QAAjC,EAA2C;AAChD,SAAOhB,cAAc,EAArB;AAGD,C,CAED;AACA;;AACA,OAAO,eAAeoB,mBAAf,CAAmCJ,QAAnC,EAA6C;AAClD,SAAOhB,cAAc,EAArB;AAGD,C,CAED;;AACA,OAAO,eAAeqB,UAAf,CAA0BN,KAA1B,EAAiCO,MAAjC,EAAyC;AAC9C,SAAOtB,cAAc,EAArB;AAGD","sourcesContent":["import fetch from \"node-fetch\";\r\nimport Cookies from 'js-cookie';\r\n\r\nconst DEFAULT_API_VERSION = '2020-04';\r\n\r\n\r\n//Sends the POST to the graphQL\r\n\r\nasync function graphqlRequest(gql,  shop = Cookies.get('shopOrigin'),\r\n  accessToken = Cookies.get('accessToken'), apiVersion=DEFAULT_API_VERSION) {\r\n\r\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\r\n\r\n\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      \"Content-Type\": \"application/graphql\",\r\n      \"X-Shopify-Access-Token\": accessToken,\r\n      \"Access-Control-Allow-Origin\": \"*\"\r\n    },\r\n    body: gql\r\n  });\r\n\r\n  //\r\n  // const { data, errors } = await response.json();\r\n  // console.log(data);\r\n  // console.log(errors);\r\n  // if (errors) throw new Error(JSON.stringify(errors));\r\n  // const userErrors = Object.values(data).find(v => v && v.userErrors);\r\n  // if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\r\n  // return data;\r\n}\r\n\r\n//Gets the tags and id of the customer of the given order\r\nexport async function coolersFromOrder(orderId) {\r\n  const data = await graphqlRequest(\r\n  `query {\r\n    order(id: gid://shopify/Order/${orderId}) {\r\n      customer {\r\n        id\r\n        tags\r\n      }\r\n    }\r\n  }`\r\n)\r\nconst id = data.order.customer.id;\r\nalert(id);\r\nreturn {...data.order, id: data.order.customer.id, tags: data.order.customer.tags}\r\n}\r\n\r\n//Makes the gql string that reduces the number of coolers for the\r\n//customer of the given order\r\nexport async function reduceCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that increases the number of coolers for the\r\n//customer of the given order\r\nexport async function increaseCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that adds the cooler to the order's custom attribute\r\nexport async function addToOrder(order, cooler) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}