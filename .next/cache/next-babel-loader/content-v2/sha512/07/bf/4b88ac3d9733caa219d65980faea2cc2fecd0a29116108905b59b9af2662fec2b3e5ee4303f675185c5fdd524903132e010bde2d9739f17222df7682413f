{"ast":null,"code":"require('isomorphic-fetch');\n\nconst dotenv = require('dotenv');\n\nconst Koa = require('koa');\n\nconst next = require('next');\n\nconst {\n  default: createShopifyAuth\n} = require('@shopify/koa-shopify-auth');\n\nconst {\n  verifyRequest\n} = require('@shopify/koa-shopify-auth');\n\nconst session = require('koa-session');\n\ndotenv.config();\n\nconst {\n  default: graphQLProxy\n} = require('@shopify/koa-shopify-graphql-proxy');\n\nconst {\n  ApiVersion\n} = require('@shopify/koa-shopify-graphql-proxy');\n\nconst port = parseInt(process.env.PORT, 10) || 3000;\nconst dev = true;\nconst app = next({\n  dev\n});\nconst handle = app.getRequestHandler(); //import {createShopifyMiddleware} from \"./auth\";\n\nexport const {\n  SHOPIFY_API_SECRET_KEY,\n  SHOPIFY_API_KEY,\n  HOST\n} = process.env;\napp.prepare().then(() => {\n  const server = new Koa();\n  server.use(session({\n    secure: true,\n    sameSite: 'none'\n  }, server));\n  server.keys = [SHOPIFY_API_SECRET_KEY];\n  server.use(createShopifyAuth({\n    apiKey: SHOPIFY_API_KEY,\n    secret: SHOPIFY_API_SECRET_KEY,\n    scopes: ['read_products', 'write_products', 'read_script_tags', 'write_script_tags'],\n\n    afterAuth(ctx) {\n      const {\n        shop,\n        accessToken\n      } = ctx.session;\n      ctx.cookies.set('shopOrigin', shop, {\n        httpOnly: false\n      });\n      ctx.redirect('/');\n    }\n\n  }));\n  server.use(graphQLProxy({\n    version: ApiVersion.October19\n  }));\n  server.use(verifyRequest());\n  server.use(async ctx => {\n    await handle(ctx.req, ctx.res);\n    ctx.respond = false;\n    ctx.res.statusCode = 200;\n    return;\n  }); // server.use(createShopifyMiddleware(HOST, db, {\n  //     apiKey: SHOPIFY_API_KEY,\n  //     secret: SHOPIFY_API_SECRET_KEY\n  // }));\n\n  server.listen(port, () => {\n    console.log(`> Ready on http://localhost:${port}`);\n  });\n});","map":{"version":3,"sources":["C:/Users/abouh/OneDrive/Desktop/sampleApp/server.js"],"names":["require","dotenv","Koa","next","default","createShopifyAuth","verifyRequest","session","config","graphQLProxy","ApiVersion","port","parseInt","process","env","PORT","dev","app","handle","getRequestHandler","SHOPIFY_API_SECRET_KEY","SHOPIFY_API_KEY","HOST","prepare","then","server","use","secure","sameSite","keys","apiKey","secret","scopes","afterAuth","ctx","shop","accessToken","cookies","set","httpOnly","redirect","version","October19","req","res","respond","statusCode","listen","console","log"],"mappings":"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","sourcesContent":["require('isomorphic-fetch');\r\nconst dotenv = require('dotenv');\r\nconst Koa = require('koa');\r\nconst next = require('next');\r\nconst { default: createShopifyAuth } = require('@shopify/koa-shopify-auth');\r\nconst { verifyRequest } = require('@shopify/koa-shopify-auth');\r\nconst session = require('koa-session');\r\n\r\ndotenv.config();\r\nconst { default: graphQLProxy } = require('@shopify/koa-shopify-graphql-proxy');\r\nconst { ApiVersion } = require('@shopify/koa-shopify-graphql-proxy')\r\n\r\nconst port = parseInt(process.env.PORT, 10) || 3000;\r\nconst dev = process.env.NODE_ENV !== 'production';\r\nconst app = next({ dev });\r\nconst handle = app.getRequestHandler();\r\n//import {createShopifyMiddleware} from \"./auth\";\r\n\r\nexport const { SHOPIFY_API_SECRET_KEY, SHOPIFY_API_KEY, HOST } = process.env;\r\n\r\n\r\napp.prepare().then(() => {\r\n  const server = new Koa();\r\n  server.use(session({ secure: true, sameSite: 'none' }, server));\r\n  server.keys = [SHOPIFY_API_SECRET_KEY];\r\n  server.use(\r\n    createShopifyAuth({\r\n      apiKey: SHOPIFY_API_KEY,\r\n      secret: SHOPIFY_API_SECRET_KEY,\r\n      scopes: [\r\n        'read_products',\r\n        'write_products',\r\n        'read_script_tags',\r\n        'write_script_tags'\r\n      ],\r\n      afterAuth(ctx) {\r\n        const { shop, accessToken } = ctx.session;\r\n        ctx.cookies.set('shopOrigin', shop, {\r\n          httpOnly: false,\r\n        })\r\n\r\n        ctx.redirect('/');\r\n      },\r\n    }),\r\n  );\r\n\r\n  server.use(graphQLProxy({version: ApiVersion.October19}))\r\n\r\n  server.use(verifyRequest());\r\n  server.use(async (ctx) => {\r\n    await handle(ctx.req, ctx.res);\r\n    ctx.respond = false;\r\n    ctx.res.statusCode = 200;\r\n    return\r\n  });\r\n\r\n  // server.use(createShopifyMiddleware(HOST, db, {\r\n  //     apiKey: SHOPIFY_API_KEY,\r\n  //     secret: SHOPIFY_API_SECRET_KEY\r\n  // }));\r\n\r\n  server.listen(port, () => {\r\n    console.log(`> Ready on http://localhost:${port}`)\r\n  })\r\n})\r\n"]},"metadata":{},"sourceType":"module"}