{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst DEFAULT_API_VERSION = '2020-04';\nconst DEFAULT_ACCESSTOKEN = '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';\nconst DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'; //Sends the POST to the graphQL\n\nasync function graphqlRequest(gql, shop = DEFAULT_STORENAME, accessToken = DEFAULT_ACCESSTOKEN, apiVersion = DEFAULT_API_VERSION) {\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/graphql\",\n      \"X-Shopify-Access-Token\": accessToken\n    },\n    body: gql\n  });\n  const {\n    data,\n    errors\n  } = await response.json();\n  if (errors) throw new Error(JSON.stringify(errors));\n  const userErrors = Object.values(data).find(v => v && v.userErrors);\n  if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\n  return data;\n} //Gets the tags and id of the customer of the given order\n\n\nexport async function coolersFromOrder(orderId) {\n  const data = graphqlRequest(`query {\n    order(id: gid://shopify/Order/${orderId}) {\n      customer {\n        id\n        tags\n      }\n    }\n  }`);\n  return _objectSpread({}, data.order);\n} //Makes the gql string that reduces the number of coolers for the\n//customer of the given order\n\nexport async function reduceCoolerCount(customer) {\n  return graphqlRequest();\n} //Makes the gql string that increases the number of coolers for the\n//customer of the given order\n\nexport async function increaseCoolerCount(customer) {\n  return graphqlRequest();\n} //Makes the gql string that adds the cooler to the order's custom attribute\n\nexport async function addToOrder(order, cooler) {\n  return graphqlRequest();\n}","map":{"version":3,"sources":["C:/Users/abouh/OneDrive/Desktop/sampleApp/pages/store.js"],"names":["DEFAULT_API_VERSION","DEFAULT_ACCESSTOKEN","DEFAULT_STORENAME","graphqlRequest","gql","shop","accessToken","apiVersion","url","response","fetch","method","headers","body","data","errors","json","Error","JSON","stringify","userErrors","Object","values","find","v","length","coolersFromOrder","orderId","order","reduceCoolerCount","customer","increaseCoolerCount","addToOrder","cooler"],"mappings":";;;;;;AAEA,MAAMA,mBAAmB,GAAG,SAA5B;AACA,MAAMC,mBAAmB,GAAG,wCAA5B;AACA,MAAMC,iBAAiB,GAAG,mCAA1B,C,CAEA;;AAEA,eAAeC,cAAf,CAA8BC,GAA9B,EAAoCC,IAAI,GAAGH,iBAA3C,EACEI,WAAW,GAAGL,mBADhB,EACqCM,UAAU,GAACP,mBADhD,EACqE;AAEnE,QAAMQ,GAAG,GAAI,WAAUH,IAAK,cAAaE,UAAW,eAApD;AACA,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,qBADT;AAEP,gCAA0BN;AAFnB,KAFuB;AAMhCO,IAAAA,IAAI,EAAET;AAN0B,GAAN,CAA5B;AAQA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMN,QAAQ,CAACO,IAAT,EAA/B;AACA,MAAID,MAAJ,EAAY,MAAM,IAAIE,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAV,CAAN;AACZ,QAAMK,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcR,IAAd,EAAoBS,IAApB,CAAyBC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACJ,UAArC,CAAnB;AACA,MAAIA,UAAU,IAAIA,UAAU,CAACK,MAAX,GAAoB,CAAtC,EAAyC,MAAM,IAAIR,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeC,UAAf,CAAV,CAAN;AACzC,SAAON,IAAP;AACD,C,CAED;;;AACA,OAAO,eAAeY,gBAAf,CAAgCC,OAAhC,EAAyC;AAC9C,QAAMb,IAAI,GAAGX,cAAc,CAC1B;AACH,oCAAoCwB,OAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA,IAR6B,CAA3B;AAUF,2BAAWb,IAAI,CAACc,KAAhB;AACC,C,CAED;AACA;;AACA,OAAO,eAAeC,iBAAf,CAAiCC,QAAjC,EAA2C;AAChD,SAAO3B,cAAc,EAArB;AAGD,C,CAED;AACA;;AACA,OAAO,eAAe4B,mBAAf,CAAmCD,QAAnC,EAA6C;AAClD,SAAO3B,cAAc,EAArB;AAGD,C,CAED;;AACA,OAAO,eAAe6B,UAAf,CAA0BJ,KAA1B,EAAiCK,MAAjC,EAAyC;AAC9C,SAAO9B,cAAc,EAArB;AAGD","sourcesContent":["\r\n\r\nconst DEFAULT_API_VERSION = '2020-04';\r\nconst DEFAULT_ACCESSTOKEN = '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'\r\nconst DEFAULT_STORENAME = 'svenfish-test-store.myshopify.com'\r\n\r\n//Sends the POST to the graphQL\r\n\r\nasync function graphqlRequest(gql,  shop = DEFAULT_STORENAME,\r\n  accessToken = DEFAULT_ACCESSTOKEN, apiVersion=DEFAULT_API_VERSION) {\r\n\r\n  const url = `https://${shop}/admin/api/${apiVersion}/graphql.json`;\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      \"Content-Type\": \"application/graphql\",\r\n      \"X-Shopify-Access-Token\": accessToken\r\n    },\r\n    body: gql\r\n  });\r\n  const { data, errors } = await response.json();\r\n  if (errors) throw new Error(JSON.stringify(errors));\r\n  const userErrors = Object.values(data).find(v => v && v.userErrors);\r\n  if (userErrors && userErrors.length > 0) throw new Error(JSON.stringify(userErrors));\r\n  return data;\r\n}\r\n\r\n//Gets the tags and id of the customer of the given order\r\nexport async function coolersFromOrder(orderId) {\r\n  const data = graphqlRequest(\r\n  `query {\r\n    order(id: gid://shopify/Order/${orderId}) {\r\n      customer {\r\n        id\r\n        tags\r\n      }\r\n    }\r\n  }`\r\n)\r\nreturn {...data.order, }\r\n}\r\n\r\n//Makes the gql string that reduces the number of coolers for the\r\n//customer of the given order\r\nexport async function reduceCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that increases the number of coolers for the\r\n//customer of the given order\r\nexport async function increaseCoolerCount(customer) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n\r\n//Makes the gql string that adds the cooler to the order's custom attribute\r\nexport async function addToOrder(order, cooler) {\r\n  return graphqlRequest(\r\n\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}